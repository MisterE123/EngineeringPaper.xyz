// SymPy has many reserved names
// These will get remapped so the user can still use these as variable names
export const RESERVED = new Set([
  // trig functions that don't match the latex names (or don't have latex versions)
  "asin", "acos", "atan", "acot", "asec", "acsc", "atan2", "sech", "csch",
  "asinh", "acosh", "atahn", "acoth", "asech", "acsch",
  // from sympy/core/__init__.py (leave out pi since pi maps one-to-one)
  "sympify",
  "SympifyError",
  "cacheit",
  "assumptions",
  "Basic",
  "Atom",
  "S",
  "Expr",
  "AtomicExpr",
  "UnevaluatedExpr",
  "Symbol",
  "Wild",
  "Dummy",
  "symbols",
  "var",
  "Number",
  "Float",
  "Rational",
  "Integer",
  "NumberSymbol",
  "RealNumber",
  "igcd",
  "ilcm",
  "seterr",
  "E",
  "I",
  "nan",
  "oo",
  "zoo",
  "AlgebraicNumber",
  "comp",
  "Pow",
  "Mul",
  "prod",
  "Add",
  "Mod",
  "Rel",
  "Eq",
  "Ne",
  "Lt",
  "Le",
  "Gt",
  "Ge",
  "Equality",
  "GreaterThan",
  "LessThan",
  "Unequality",
  "StrictGreaterThan",
  "StrictLessThan",
  "vectorize",
  "Lambda",
  "WildFunction",
  "Derivative",
  "diff",
  "FunctionClass",
  "Function",
  "Subs",
  "expand",
  "PoleError",
  "nfloat",
  "arity",
  "PrecisionExhausted",
  "N",
  "evalf",
  "Tuple",
  "Dict",
  "evaluate",
  "Catalan",
  "EulerGamma",
  "GoldenRatio",
  "TribonacciConstant",
  "UndefinedKind",
  "NumberKind",
  "BooleanKind",
  // from sympy/functions/special/error_functions.py
  "TrigonometricIntegral",
  "Si",
  "Ci",
  "Ei",
  "expint",
  "Shi",
  "Li",
  "li",
  "erf",
  "erfc",
  "E1",
  "Chi",
  "erfi",
  "erf2",
  "fresnels",
  "fresnelc",
  "FresnelIntegral",
  "erfcinv",
  "erf2inv",
  // others
  "test",
  "rad",
  "deg",
  // special functions
  "DiracDelta",
  "Heaviside",
  "SingularityFunction",
  "gamma",
  "lowergamma",
  "uppergamma",
  "polygamma",
  "trigamma",
  "beta",
  "besselj",
  "besseli",
  "besselk",
  "airyai",
  "airybi",
  "airyprime",
  "airybiprime",
  "bspline_basis",
  "bspline_basis_set",
  "zeta",
  "dirichlet_eta",
  "lerchphi",
  "polylog",
  "hyper",
  "hyperexpand",
  "meijerg",
  "elliptic_k",
  "elliptic_f",
  "mathieus",
  "mathieuc",
  "mathieusprime",
  "mathieucprime",
  "gegenbauer",
  "chebyshevt_root",
  "chebyshevu",
  "chebyshevu_root",
  "legendre",
  "assoc_legendre",
  "hermite",
  "laguerre",
  "assoc_laguerre",
  "jacobi_poly",
  "gegenbauer_poly",
  "chebyshevt_poly",
  "chebyshevu_poly",
  "hermite_poly",
  "legendre_poly",
  "laguerre_poly",
  "Ynm",
  "Ynm_c",
  "Znm",
  "Eijk",
  "LeviCivita",
  "bell",
  "bernoulli",
  "catalan",
  "euler",
  "fibonacci",
  "harmonic",
  "lucas",
  "genocchi",
  "partition",
  "tribonacci",
  // elementary functions
  "re",
  "im",
  "sign",
  "Abs",
  "arg",
  "conjugate",
  "polar_lift",
  "periodic_argument",
  "principal_branch",
  "sinc",
  "ceiling",
  "floor",
  "frac",
  "exp",
  "LambertW",
  "exp_polar",
  "Piecewise",
  "piecewise_fold",
  "Id",
  "Identity",
  "Min",
  "min",
  "Max",
  "max",
  "root",
  "sqrt",
  "cbrt",
  "real_root",
  // Python reserved words
  "False", "class", "from", "or",
  "None", "continue", "global", "pass",
  "True", "def", "if", "raise",
  "and", "del", "import", "return",
  "as", "elif", "in", "try",
  "assert", "else", "is", "while",
  "async", "except", "lambda", "with",
  "await", "finally", "nonlocal", "yield",
  "break", "for", "not",
  // reserved chars
  "Q", "O"
]);

export const GREEK_CHARS = new Set(['alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta',
  'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu',
  'xi', 'pi', 'rho', 'sigma', 'tau', 'upsilon', 'phi', 'chi',
  'psi', 'omega', 'Gamma', 'Delta', 'Theta', 'Lambda',
  'Xi', 'Pi', 'Sigma', 'Upsilon', 'Phi', 'Psi', 'Omega']);

export const UNASSIGNABLE = new Set(["I", "E", "pi"]);

export const BUILTIN_FUNCTION_MAP = new Map([
  ['max', '_Max'],
  ['min', '_Min'],
  ['real', '_re'],
  ['imag', '_im'],
  ['conj', '_conjugate'],
  ['angle', '_arg']
]);

export const COMPARISON_MAP = new Map([
  ["<", "_StrictLessThan"],
  ["\\le", "_LessThan"],
  [">", "_StrictGreaterThan"],
  ["\\ge", "_GreaterThan"]
])

export const UNITS_WITH_OFFSET = new Set(['degC', 'degF', 'celsius', 'fahrenheit']);

export const TYPE_PARSING_ERRORS = {
  math: "This field must contain an assignment (e.g., x=y*z) or a query (e.g., x=). To delete an unwanted math cell, click the trash can on the right.",
  plot: "This field must contain a function query with an input parameter range such as y(-10≤x≤10)=",
  parameter: "A variable name is required in this field.",
  units: "This field may only contain units in square brackets or may be left blank to indicate no units.",
  expression: "This field may only contain a valid expression or number without an equals sign or it may be blank.",
  expression_no_blank: "This field may only contain a valid expression or number without an equals sign.",
  number: "This field may only contain a number since units are specified for this column.",
  condition: "This field may only contain a condition statement such as x>1. The expression corresponding to the first satisfied condition will be used.",
  piecewise: "Syntax Error",
  equality: "An equation is required in this field.",
  id_list: "A variable name, or a list of variable names separated by commas, is required in this field (x,y for example). If a numerical solve is required, the variables must be given initial guess values with a tilde (x~1, y~2, for example).",
};